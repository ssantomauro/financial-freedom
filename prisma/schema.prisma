// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - now using NextAuth
model User {
  id            String   @id @default(uuid()) @db.Uuid
  email         String   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password login (hashed)

  // Subscription status
  hasLifetimeAccess Boolean  @default(false)
  subscriptionDate  DateTime?

  // Relations
  accounts      Account[]
  sessions      Session[]
  calculations  Calculation[]

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([email])
  @@map("users")
}

// NextAuth Account model - stores OAuth provider info
model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

// NextAuth Session model - stores user sessions
model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// NextAuth VerificationToken model - for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Calculation model - stores all calculator submissions
model Calculation {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @db.Uuid
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Calculator type identifier
  calculatorType String  // e.g., 'buy-vs-rent', 'compound-interest', 'retirement'

  // Input data stored as JSON
  inputData     Json

  // Result data stored as JSON
  resultData    Json?

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([calculatorType])
  @@index([userId, calculatorType])
  @@map("calculations")
}
